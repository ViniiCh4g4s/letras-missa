#!/usr/bin/env sh

echo "üîç Iniciando pre-commit hook..."

# üõ†Ô∏è Rodar o PhpStan para an√°lise est√°tica do c√≥digo
./vendor/bin/phpstan analyse --configuration=phpstan.neon || true  # Executa o PhpStan, garantindo que ele n√£o quebre o script caso n√£o esteja instalado
if [ $? -ne 0 ]; then
    echo "‚ùå Erro encontrado no PhpStan. Corrija antes de continuar. üòâ"
    exit 1  # Se houver erro no PhpStan, interrompe o commit
fi

# üõ†Ô∏è Executar os testes do Laravel em paralelo
# php artisan test --parallel  # Executa os testes em paralelo, garantindo que o script n√£o quebre se houver falha
# if [ $? -ne 0 ]; then
#     echo "‚ùå Testes falharam! Corrija os erros antes de continuar. üî•"
#     exit 1  # Se houver erro nos testes, interrompe o commit
# fi

# üìÇ Verificando se h√° arquivos PHP modificados que precisam ser formatados com Pint
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.php$' | grep -v '^vendor/' | grep -v '^public/admin/vendor/') || true

if [ -z "$STAGED_FILES" ]; then
    echo "‚úÖ Nenhum arquivo PHP modificado. Pre-commit conclu√≠do!"
    exit 0  # Se n√£o houver arquivos PHP modificados, finaliza o pre-commit sem erros
fi

echo "üìÇ Arquivos PHP modificados: $STAGED_FILES"

# üé® Formatar cada arquivo PHP alterado usando o Laravel Pint
for FILE in $STAGED_FILES
do
    echo "üé® Formatando $FILE com Laravel Pint..."
    ./vendor/bin/pint "${FILE}" > /dev/null >&1;  # Executa o Pint e suprime a sa√≠da padr√£o

    if [ $? -ne 0 ]; then
        echo "‚ùå Erro ao rodar Laravel Pint no arquivo $FILE"
        exit 1  # Se o Pint falhar, interrompe o commit
    fi

    git add "${FILE}"  # Adiciona o arquivo formatado ao staging para garantir que as mudan√ßas sejam commitadas
done

echo "‚úÖ Pre-commit hook executado com sucesso!"
exit 0  # Garante que o script finalize com sucesso para o Husky
